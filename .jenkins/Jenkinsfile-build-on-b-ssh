pipeline {
  agent any
  options { timestamps() }

  parameters {
    string(name: 'IMAGE_REPO', defaultValue: 'satya66655/lab-app', description: 'docker.io/<namespace>/<name>')
    string(name: 'IMAGE_TAG',  defaultValue: 'v1',                description: 'Image tag')
    string(name: 'B_HOST',     defaultValue: '<B_PUBLIC_IP>',     description: 'Public IP or DNS of Instance B')
    string(name: 'B_USER',     defaultValue: 'ec2-user',          description: 'SSH username on Instance B')
    booleanParam(name: 'LOGIN_BEFORE_PUSH', defaultValue: true,   description: 'docker login on Instance B before push')
  }

  environment {
    REGISTRY   = 'docker.io'
    B_HOST     = "${params.B_HOST}"
    B_USER     = "${params.B_USER}"
    IMAGE_REPO = "${params.IMAGE_REPO}"
    IMAGE_TAG  = "${params.IMAGE_TAG}"
  }

  stages {
    stage('Checkout repo') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: "*/main"]],
          userRemoteConfigs: [[url: 'https://github.com/satya66655/jenkins-eks-lab.git', credentialsId: 'github-pat']]
        ])
      }
    }

    stage('Pack build context') {
      steps {
        sh '''
          set -euo pipefail
          if [ -d app ] && [ -d docker ]; then
            tar -czf /tmp/build-context.tgz app docker
          else
            tar -czf /tmp/build-context.tgz .
          fi
          ls -lh /tmp/build-context.tgz
        '''
      }
    }

    stage('Copy context to Instance B') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'ec2b-ssh', keyFileVariable: 'KEYFILE')]) {
          sh '''
            set -euo pipefail
            SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            ssh $SSH_OPTS -i "$KEYFILE" "${B_USER}@${B_HOST}" "mkdir -p ~/jenkins-ctx"
            scp $SSH_OPTS -i "$KEYFILE" /tmp/build-context.tgz "${B_USER}@${B_HOST}:~/jenkins-ctx/build-context.tgz"
          '''
        }
      }
    }

    stage('Build & Push on Instance B') {
      steps {
        script {
          // Core build script (no secrets here)
          String core = """
            set -euo pipefail
            cd ~/jenkins-ctx
            rm -rf ctx && mkdir ctx
            tar -xzf build-context.tgz -C ctx
            cd ctx
            docker --version
            docker build -f docker/Dockerfile -t ${env.REGISTRY}/${env.IMAGE_REPO}:${env.IMAGE_TAG} .
          """

          // Push with Docker Hub login â€” NOTE escaped \$ so Groovy doesn't expand
          String pushWithLogin = """
            echo "\\$DOCKER_PASS" | docker login -u "\\$DOCKER_USER" --password-stdin ${env.REGISTRY}
            docker push ${env.REGISTRY}/${env.IMAGE_REPO}:${env.IMAGE_TAG}
            docker logout ${env.REGISTRY} || true
          """

          // Push without login (public repo, already logged in)
          String pushPublic = """
            docker push ${env.REGISTRY}/${env.IMAGE_REPO}:${env.IMAGE_TAG}
          """

          if (params.LOGIN_BEFORE_PUSH) {
            withCredentials([
              sshUserPrivateKey(credentialsId: 'ec2b-ssh', keyFileVariable: 'KEYFILE'),
              usernamePassword(credentialsId: 'dockerhub-satya', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
            ]) {
              sh """
                set -euo pipefail
                SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                ssh \$SSH_OPTS -i "\$KEYFILE" "${env.B_USER}@${env.B_HOST}" '${core}'
                ssh \$SSH_OPTS -i "\$KEYFILE" "${env.B_USER}@${env.B_HOST}" '${pushWithLogin}'
              """
            }
          } else {
            withCredentials([sshUserPrivateKey(credentialsId: 'ec2b-ssh', keyFileVariable: 'KEYFILE')]) {
              sh """
                set -euo pipefail
                SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                ssh \$SSH_OPTS -i "\$KEYFILE" "${env.B_USER}@${env.B_HOST}" '${core}'
                ssh \$SSH_OPTS -i "\$KEYFILE" "${env.B_USER}@${env.B_HOST}" '${pushPublic}'
              """
            }
          }
        }
      }
    }
  }

  post {
    success { echo "Pushed: ${env.REGISTRY}/${env.IMAGE_REPO}:${env.IMAGE_TAG}" }
  }
}

